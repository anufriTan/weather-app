{"version":3,"sources":["components/Display.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","data","temp","error","className","iconUrl","icon","date","Date","displayDate","getDate","getMonth","getFullYear","dayOfWeek","getDay","city","src","alt","description","toUpperCase","toFixed","maxTemp","minTemp","wind","Form","name","onSubmit","findWeather","type","placeholder","required","API_KEY","App","state","location","latitude","longitude","currentData","searchData","event","preventDefault","target","elements","value","URL","fetch","then","res","json","weatherData","main","weather","temp_min","temp_max","speed","undefined","setState","catch","err","console","log","navigator","geolocation","getCurrentPosition","position","currentLocation","coords","code","message","enableHighAccuracy","timeout","maximumAge","this","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24b26cc5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Display.css';\r\n\r\nfunction Display(props) {\r\n\r\n  if (!props.data.temp && !props.data.error) return <div className=\"display__error\">Загружаем погоду...</div>;\r\n  if (props.data.error) return <div className=\"display__error display__error_text\">{props.data.error}</div>;\r\n\r\n  const iconUrl = \"http://openweathermap.org/img/wn/\" + props.data.icon + \"@2x.png\";\r\n  const date = new Date();\r\n  const displayDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`\r\n  const daysNames = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\r\n  const dayOfWeek = daysNames[date.getDay()];\r\n\r\n  return (\r\n    <div className=\"display\">\r\n      <h2 className=\"display__title\" >{props.data.city}</h2>\r\n      <p className=\"display__day\">{dayOfWeek}</p>\r\n      <p className=\"display__date\">{displayDate}</p>\r\n      <div className=\"display__container\">\r\n        <img className=\"display__image\" src={iconUrl} alt={props.data.description} />\r\n        <div className=\"display__weather-container\">\r\n          <p className=\"display__description\">{props.data.description.toUpperCase()}</p>\r\n          <div className=\"display__temp-container\">\r\n            <p className=\"display__temp\">{props.data.temp.toFixed(0)}°C</p>\r\n            <div className=\"display__range-container\">\r\n              <p className=\"display__max-temp\">{props.data.maxTemp.toFixed(0)}°C</p>\r\n              <div className=\"display__line\"></div>\r\n              <p className=\"display__min-temp\">{props.data.minTemp.toFixed(0)}°C</p>\r\n            </div>\r\n          </div>\r\n          <p className=\"display__wind\">Скорость ветра: {props.data.wind.toFixed(0)}м/сек</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Display;\r\n\r\n","import React from 'react';\r\nimport './Form.css';\r\n\r\nfunction Form(props) {\r\n  return(\r\n    <div className=\"form\">\r\n      <h1 className=\"form__title\">Погода сегодня</h1>                \r\n      <form className=\"form__form\" name=\"searchForm\" onSubmit={props.findWeather} >\r\n        <input className=\"form__input\" type=\"text\" name=\"city\" placeholder=\"Введите город\" required />                            \r\n          <button className=\"form__button\">Узнать погоду</button> \r\n      </form>\r\n    </div>\r\n  )    \r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Display from './components/Display';\nimport Form from './components/Form';\n\nconst API_KEY = \"766e9be79a0a44bb40d8d0694436e7e8\";\n\nclass App extends React.Component {\n  state = {\n    location: {\n      latitude: null,\n      longitude: null,\n    },\n    currentData: {},\n    searchData: \" \"\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n\n      const options = {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      };\n\n      const success = (position) => {\n        let currentLocation = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        };\n        this.setState({ location: currentLocation });\n\n        const URL = `https://api.openweathermap.org/data/2.5/weather?lat=${this.state.location.latitude}&lon=${this.state.location.longitude}&appid=${API_KEY}&units=metric&lang=ru`;\n        fetch(URL).then((res) => {\n          return res.json();\n        })\n          .then((data) => {\n            let weatherData = {\n              temp: data.main.temp,\n              description: data.weather[0].description,\n              icon: data.weather[0].icon,\n              minTemp: data.main.temp_min,\n              maxTemp: data.main.temp_max,\n              city: data.name,\n              wind: data.wind.speed,\n              error: undefined\n            }\n            this.setState({ currentData: weatherData });\n          })\n          .catch((err) => {\n            console.log(err);\n            let message = {\n              error: \"Не удается установить связь с сервером. Попробуйте проверить подключение к Интернет или открыть приложение через несколько минут\"\n            };\n            this.setState({ currentData: message });\n          })\n      };\n\n      const error = (err) => {\n        console.log(`ERROR(${err.code}): ${err.message}`);\n        let message = {\n          error: \"Чтобы узнать погоду, введите название города\"\n        };\n        this.setState({ currentData: message });\n      };\n\n      navigator.geolocation.getCurrentPosition(success, error, options);\n\n    } else {\n      console.log('Geolocation is not supported for this Browser/OS version yet.');\n      let message = {\n        error: \"Чтобы узнать погоду, введите название города\"\n      };\n      this.setState({ currentData: message });\n    }\n  }\n\n\n  findWeather = (event) => {\n    event.preventDefault();\n    const city = event.target.elements.city.value;\n    const URL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`;\n    fetch(URL)\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        let weatherData = {\n          temp: data.main.temp,\n          description: data.weather[0].description,\n          icon: data.weather[0].icon,\n          minTemp: data.main.temp_min,\n          maxTemp: data.main.temp_max,\n          city: data.name,\n          wind: data.wind.speed,\n          error: undefined\n        }\n        this.setState({ currentData: weatherData })\n      })\n      .catch((err) => {\n        let message = {\n          error: \"По вашему запросу ничего не найдено\"\n        };\n        console.log(err);\n        this.setState({ currentData: message });\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form findWeather={this.findWeather} />\n        <Display data={this.state.currentData} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}